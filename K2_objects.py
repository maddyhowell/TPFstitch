import numpy as np

""" return tpfs ids and campaigns for objects observed in the K2 mission

    add any object where neccessary.
"""

def TPF_ids(K2object):

    tpf_ids = {'M4': [200004370, 200004371, 200004372, 200004373, 200004374, 200004375, 200004376,
                      200004377, 200004378, 200004379, 200004380, 200004381, 200004382, 200004383, 200004384,
                      200004385],
               'M80': [200004386, 200004387, 200004388, 200004389],
               'Ruprecht 147': [200062524, 200062525, 200062526, 200062527, 200062528, 200062529,
                                200062530, 200062531, 200062532, 200062533, 200062534, 200062535,
                                200062536, 200062537, 200062538, 200062539, 200062540, 200062541,
                                200062542, 200062543, 200062544, 200062545, 200062546, 200062547,
                                200062548, 200062549, 200062550, 200062551, 200062552, 200062553,
                                200062554, 200062555, 200062556, 200062557, 200062558, 200062559,
                                200062560, 200062561, 200062562, 200062563, 200062564, 200062565,
                                200062566, 200062567, 200062568, 200062569, 200062570, 200062571,
                                200062572, 200062573, 200062574, 200062575, 200062576, 200062577,
                                200062578, 200062579, 200062580, 200062581, 200062582, 200062583],
                'M9': [200126982, 200126983, 200126984, 200126985, 200126986, 200126987,
                        200126988, 200126989, 200126990, 200126991, 200126992, 200126993,
                        200126994, 200126995, 200126996, 200126997, 200126998, 200126999,
                        200127000, 200127001, 200127002, 200127003, 200127004, 200127005,
                        200127006, 200127007, 200127008, 200127009, 200127010, 200127011,
                        200127012, 200127013, 200127014, 200127015, 200127016, 200127017,
                        200127018, 200127019, 200127020, 200127021, 200127022, 200127023,
                        200127024, 200127025, 200127026, 200127027, 200127028, 200127029,
                        200127030, 200127031, 200127032, 200127033, 200127034, 200127035,
                        200127036, 200127037, 200127038, 200127039, 200127040, 200127041,
                        200127042, 200127043, 200127044, 200127045, 200127046, 200127047,
                        200127048, 200127049, 200127050, 200127051, 200127052, 200127053,
                        200127054, 200127055, 200127056, 200127057, 200127058, 200127059,
                        200127060, 200127061, 200127062, 200127063, 200127064, 200127065,
                        200127066, 200127067, 200127068, 200127069, 200127070, 200127071,
                        200127072, 200127073, 200127074, 200127075, 200127076, 200127077,
                        200127078, 200127079, 200127080, 200127081, 200127082, 200127083,
                        200127084, 200127085, 200127086, 200127087, 200127088, 200127089,
                        200127090, 200127091, 200127092, 200127093, 200127094, 200127095,
                        200127096, 200127097, 200127098, 200127099, 200127100, 200127101,
                        200127102, 200127103, 200127104, 200127105, 200127106, 200127107,
                        200127108, 200127109,
                        200145408, 200145409, 200145410, 200145411, 200145412, 200145413,
                         200145414, 200145415, 200145416, 200145417, 200145418, 200145419,
                         200145420, 200145421, 200145422, 200145423, 200145424, 200145425,
                         200145426, 200145427, 200145428, 200145429, 200145430, 200145431,
                         200145432, 200145433, 200145434, 200145435, 200145436, 200145437,
                         200145438, 200145439, 200145440, 200145441, 200145442, 200145443,
                         200145444, 200145445, 200145446, 200145447, 200145448, 200145449,
                         200145450, 200145451, 200145452, 200145453, 200145454, 200145455,
                         200145456, 200145457, 200145458, 200145459, 200145460, 200145461,
                         200145462, 200145463, 200145464, 200145465, 200145466, 200145467,
                         200145468, 200145469, 200145470, 200145471, 200145472, 200145473,
                         200145474, 200145475, 200145476, 200145477, 200145478, 200145479,
                         200145480, 200145481, 200145482, 200145483, 200145484, 200145485,
                         200145486, 200145487, 200145488, 200145489, 200145490, 200145491,
                         200145492, 200145493, 200145494, 200145495, 200145496, 200145497,
                         200145498, 200145499, 200145500, 200145501, 200145502, 200145503,
                         200145504, 200145505, 200145506, 200145507, 200145508, 200145509,
                         200145510, 200145511, 200145512, 200145513, 200145514, 200145515,
                         200145516, 200145517, 200145518, 200145519, 200145520, 200145521,
                         200145522, 200145523, 200145524, 200145525, 200145526, 200145527,
                         200145528, 200145529, 200145530, 200145531, 200145532, 200145533,
                         200145534, 200145535],
                'M19': [200126870, 200126871, 200126872, 200126873, 200126874, 200126875,
                         200126876, 200126877, 200126878, 200126879, 200126880, 200126881,
                         200126882, 200126883, 200126884, 200126885, 200126886, 200126887,
                         200126888, 200126889, 200126890, 200126891, 200126892, 200126893,
                         200126894, 200126895, 200126896, 200126897, 200126898, 200126899,
                         200126900, 200126901, 200126902, 200126903, 200126904, 200126905,
                         200126906, 200126907, 200126908, 200126909, 200126910, 200126911,
                         200126912, 200126913, 200126914, 200126915, 200126916, 200126917,
                         200126918, 200126919, 200126920, 200126921, 200126922, 200126923,
                         200126924, 200126925, 200126926, 200126927, 200126928, 200126929,
                         200126930, 200126931, 200126932, 200126933, 200126934, 200126935,
                         200126936, 200126937, 200126938, 200126939, 200126940, 200126941,
                         200126942, 200126943, 200126944, 200126945, 200126946, 200126947,
                         200126948, 200126949, 200126950, 200126951, 200126952, 200126953,
                         200126954, 200126955, 200126956, 200126957, 200126958, 200126959,
                         200126960, 200126961, 200126962, 200126963, 200126964, 200126965,
                         200126966, 200126967, 200126968, 200126969, 200126970, 200126971,
                         200126972, 200126973, 200126974, 200126975, 200126976, 200126977,
                         200126978, 200126979, 200126980, 200126981,
                         200145291, 200145292, 200145293, 200145294, 200145295, 200145296,
                          200145297, 200145298, 200145299, 200145300, 200145301, 200145302,
                          200145303, 200145304, 200145305, 200145306, 200145307, 200145308,
                          200145309, 200145310, 200145311, 200145312, 200145313, 200145314,
                          200145315, 200145316, 200145317, 200145318, 200145319, 200145320,
                          200145321, 200145322, 200145323, 200145324, 200145325, 200145326,
                          200145327, 200145328, 200145329, 200145330, 200145331, 200145332,
                          200145333, 200145334, 200145335, 200145336, 200145337, 200145338,
                          200145339, 200145340, 200145341, 200145342, 200145343, 200145344,
                          200145345, 200145346, 200145347, 200145348, 200145349, 200145350,
                          200145351, 200145352, 200145353, 200145354, 200145355, 200145356,
                          200145357, 200145358, 200145359, 200145360, 200145361, 200145362,
                          200145363, 200145364, 200145365, 200145366, 200145367, 200145368,
                          200145369, 200145370, 200145371, 200145372, 200145373, 200145374,
                          200145375, 200145376, 200145377, 200145378, 200145379, 200145380,
                          200145381, 200145382, 200145383, 200145384, 200145385, 200145386,
                          200145387, 200145388, 200145389, 200145390, 200145391, 200145392,
                          200145393, 200145394, 200145395, 200145396, 200145397, 200145398,
                          200145399, 200145400, 200145401, 200145402, 200145403, 200145404,
                          200145405, 200145406, 200145407]
                          }

    ## assuming that the first half of campaign 11 is useless
    campaign = {'M4': '02', 'M80': '02', 'Ruprecht 147': '02', 'M9': '112', 'M19': '112'}



    return tpf_ids[K2object], campaign[K2object]

def outskirt_EPICIDs(K2object):

    tpf_ids = {'M19': [232307555, 232311226, 232305048, 232307616, 232311067, 232307467, 232313427],
               'M9': [234660893, 234563368, 234563958, 234559535, 234565434, 251248689, 234572782]}

    return tpf_ids[K2object]


def M9BoarderTPFs(tpf_id, campaign):
    if campaign == '111':
        if tpf_id <= 200126989:
            tpf_list = tpf_id + np.array([-1, +1, +8, +9, +10])
        elif tpf_id >= 200126990 and tpf_id <= 200126999:
            tpf_list = tpf_id + np.array([-1, +1, +10, + 11, + 12, -10, -9, -8])
        elif tpf_id >= 200127000 and tpf_id <= 200127011:
            tpf_list = tpf_id + np.array([-1, +1, +11, +12, +13, -12, -11, -10])
        elif tpf_id >= 200127012 and tpf_id <= 200127071:
            tpf_list = tpf_id + np.array([-1, +1, +11, +12, +13, -13, -12, -11])

        elif tpf_id >= 200127072 and tpf_id <= 200127083:
            tpf_list = tpf_id + np.array([-1, +1, +10, +11, +12, -13, -12, -11])
        elif tpf_id >= 200127084 and tpf_id <= 200127093:
            tpf_list = tpf_id + np.array([-1, +1, +9, +10, +11, -12, -11, -10])
        elif tpf_id >= 200127094 and tpf_id <= 200127103:
            tpf_list = tpf_id + np.array([-1, +1, +7, +8, +9, -11, -10, -9])
        elif tpf_id >= 200127104 and tpf_id <= 200127109:
            tpf_list = tpf_id + np.array([-1, +1, -9, -8, -7])
        ## todo

## Campaign = 11b
    elif campaign == '112':
        if tpf_id <= 200145415:
            tpf_list = tpf_id + np.array([-1, +1, +8, +9, +10])
        elif tpf_id >= 200145416 and tpf_id <= 200145425:
            tpf_list = tpf_id + np.array([-1, +1, +10, + 11, + 12, -10, -9, -8])
        elif tpf_id >= 200145426 and tpf_id <= 200145437:
            tpf_list = tpf_id + np.array([-1, +1, +11, +12, +13, -12, -11, -10])
        elif tpf_id >= 20014538 and tpf_id <= 200145509:
            tpf_list = tpf_id + np.array([-1, +1, +11, +12, +13, -13, -12, -11])
        elif tpf_id >= 200145510 and tpf_id <= 200145520:
            tpf_list = tpf_id + np.array([-1, +1, +9, +10, +11, -13, -12, -11])
        elif tpf_id >= 200145521 and tpf_id <= 200145529:
            tpf_list = tpf_id + np.array([-1, +1, +6, +7, +8, -11, -10, -9])
        elif tpf_id >= 200145530 and tpf_id <= 200145535:
            tpf_list = tpf_id + np.array([-1, +1, -8, -7, -6])

    return tpf_list
